<?xml version="1.0" encoding="UTF-8"?><Weakness_Catalog Name="CWE" Version="4.2" Date="2020-08-20" xmlns="http://cwe.mitre.org/cwe-6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://cwe.mitre.org/cwe-6 http://cwe.mitre.org/data/xsd/cwe_schema_v6.3.xsd" xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <Weaknesses>
        <Weakness ID="20" Name="Improper Input Validation" Abstraction="Class" Structure="Simple" Status="Stable">
            <Description>The product receives input or data, but it does
                not validate or incorrectly validates that the input has the
                properties that are required to process the data safely and
                correctly.</Description>
            <Extended_Description>
                <xhtml:p>Input validation is a frequently-used technique
                    for checking potentially dangerous inputs in order to
                    ensure that the inputs are safe processing within the
                    code, or when communicating with other components.  When
                    software does not validate input properly, an attacker is
                    able to craft the input in a form that is not expected by
                    the rest of the application. This will lead to parts of the
                    system receiving unintended input, which may result in
                    altered control flow, arbitrary control of a resource, or
                    arbitrary code execution.</xhtml:p>
                <xhtml:p>Input validation is not the only technique for
                    processing input, however.  Other techniques attempt to
                    transform potentially-dangerous input into something safe, such
                    as filtering (CWE-790) - which attempts to remove dangerous
                    inputs - or encoding/escaping (CWE-116), which attempts to
                    ensure that the input is not misinterpreted when it is included
                    in output to another component. Other techniques exist as well
                    (see CWE-138 for more examples.)</xhtml:p>
                <xhtml:p>Input validation can be applied to:</xhtml:p>
                <xhtml:ul>
                    <xhtml:li>raw data - strings, numbers, parameters, file contents, etc.</xhtml:li>
                    <xhtml:li>metadata - information about the raw data, such as headers or size</xhtml:li>
                </xhtml:ul>
                <xhtml:p>Data can be simple or structured.  Structured data
                    can be composed of many nested layers, composed of
                    combinations of metadata and raw data, with other simple or
                    structured data.</xhtml:p>
                <xhtml:p>Many properties of raw data or metadata may need
                    to be validated upon entry into the code, such
                    as:</xhtml:p>
                <xhtml:ul>
                    <xhtml:li>specified quantities such as size, length, frequency, price, rate, number of operations, time, etc.</xhtml:li>
                    <xhtml:li>implied or derived quantities, such as the actual size of a file instead of a specified size</xhtml:li>
                    <xhtml:li>indexes, offsets, or positions into more complex data structures</xhtml:li>
                    <xhtml:li>symbolic keys or other elements into hash tables, associative arrays, etc.</xhtml:li>
                    <xhtml:li>well-formedness, i.e. syntactic correctness - compliance with expected syntax </xhtml:li>
                    <xhtml:li>lexical token correctness - compliance with rules for what is treated as a token</xhtml:li>
                    <xhtml:li>specified or derived type - the actual type of the input (or what the input appears to be)</xhtml:li>
                    <xhtml:li>consistency - between individual data elements, between raw data and metadata, between references, etc.</xhtml:li>
                    <xhtml:li>conformance to domain-specific rules, e.g. business logic </xhtml:li>
                    <xhtml:li>equivalence - ensuring that equivalent inputs are treated the same</xhtml:li>
                    <xhtml:li>authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data</xhtml:li>
                </xhtml:ul>
                <xhtml:p>Implied or derived properties of data must often
                    be calculated or inferred by the code itself.  Errors in
                    deriving properties may be considered a contributing factor
                    to improper input validation.
                </xhtml:p>
                <xhtml:p>Note that "input validation" has very different
                    meanings to different people, or within different
                    classification schemes.  Caution must be used when
                    referencing this CWE entry or mapping to it.  For example,
                    some weaknesses might involve inadvertently giving control
                    to an attacker over an input when they should not be able
                    to provide an input at all, but sometimes this is referred
                    to as input validation.</xhtml:p>
                <xhtml:p>Finally, it is important to emphasize that the
                    distinctions between input validation and output escaping
                    are often blurred, and developers must be careful to
                    understand the difference, including how input validation
                    is not always sufficient to prevent vulnerabilities,
                    especially when less stringent data types must be
                    supported, such as free-form text. Consider a SQL injection
                    scenario in which a person's last name is inserted into a
                    query. The name "O'Reilly" would likely pass the validation
                    step since it is a common last name in the English
                    language. However, this valid name cannot be directly
                    inserted into the database because it contains the "'"
                    apostrophe character, which would need to be escaped or
                    otherwise transformed. In this case, removing the
                    apostrophe might reduce the risk of SQL injection, but it
                    would produce incorrect behavior because the wrong name
                    would be recorded.</xhtml:p>
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="707" View_ID="1000" Ordinal="Primary"/>
                <Related_Weakness Nature="PeerOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
                <Related_Weakness Nature="CanPrecede" CWE_ID="22" View_ID="1000"/>
                <Related_Weakness Nature="CanPrecede" CWE_ID="41" View_ID="1000"/>
                <Related_Weakness Nature="CanPrecede" CWE_ID="74" View_ID="1000"/>
                <Related_Weakness Nature="CanPrecede" CWE_ID="119" View_ID="1000"/>
                <Related_Weakness Nature="CanPrecede" CWE_ID="770" View_ID="1000"/>
            </Related_Weaknesses>
            <Applicable_Platforms>
                <Language Class="Language-Independent" Prevalence="Often"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Architecture and Design</Phase>
                </Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                    <Note>
                        <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
                        <xhtml:p>If a programmer believes that an attacker cannot modify certain inputs, then the programmer might not perform any input validation at all. For example, in web applications, many programmers believe that cookies and hidden form fields can not be modified from a web browser (CWE-472), although they can be altered using a proxy or a custom program. In a client-server architecture, the programmer might assume that client-side security checks cannot be bypassed, even when a custom client could be written that skips those checks (CWE-602).</xhtml:p>
                    </Note>
                </Introduction>
            </Modes_Of_Introduction>
            <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
            <Common_Consequences>
                <Consequence>
                    <Scope>Availability</Scope>
                    <Impact>DoS: Crash, Exit, or Restart</Impact>
                    <Impact>DoS: Resource Consumption (CPU)</Impact>
                    <Impact>DoS: Resource Consumption (Memory)</Impact>
                    <Note>An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU.</Note>
                </Consequence>
                <Consequence>
                    <Scope>Confidentiality</Scope>
                    <Impact>Read Memory</Impact>
                    <Impact>Read Files or Directories</Impact>
                    <Note>An attacker could read confidential data if they are able to control resource references.</Note>
                </Consequence>
                <Consequence>
                    <Scope>Integrity</Scope>
                    <Scope>Confidentiality</Scope>
                    <Scope>Availability</Scope>
                    <Impact>Modify Memory</Impact>
                    <Impact>Execute Unauthorized Code or Commands</Impact>
                    <Note>An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution.</Note>
                </Consequence>
            </Common_Consequences>
            <Detection_Methods>
                <Detection_Method Detection_Method_ID="DM-3">
                    <Method>Automated Static Analysis</Method>
                    <Description>
                        <xhtml:p>Some instances of improper input validation can be detected using automated static analysis.</xhtml:p>
                        <xhtml:p>A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present.</xhtml:p>
                        <xhtml:p>Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.</xhtml:p>
                    </Description>
                </Detection_Method>
                <Detection_Method Detection_Method_ID="DM-4">
                    <Method>Manual Static Analysis</Method>
                    <Description>When custom input validation is required, such as when enforcing business rules, manual analysis is necessary to ensure that the validation is properly implemented.</Description>
                </Detection_Method>
                <Detection_Method Detection_Method_ID="DM-5">
                    <Method>Fuzzing</Method>
                    <Description>Fuzzing techniques can be useful for detecting input validation errors. When unexpected inputs are provided to the software, the software should not crash or otherwise become unstable, and it should generate application-controlled error messages. If exceptions or interpreter-generated error messages occur, this indicates that the input was not detected and handled within the application logic itself.</Description>
                </Detection_Method>
                <Detection_Method>
                    <Method>Automated Static Analysis - Binary or Bytecode</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                                    <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>SOAR Partial</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Manual Static Analysis - Binary or Bytecode</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>SOAR Partial</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Dynamic Analysis with Automated Results Interpretation</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Highly cost effective:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Web Application Scanner</xhtml:li>
                                    <xhtml:li>Web Services Scanner</xhtml:li>
                                    <xhtml:li>Database Scanners</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Dynamic Analysis with Manual Results Interpretation</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Highly cost effective:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Fuzz Tester</xhtml:li>
                                    <xhtml:li>Framework-based Fuzzer</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                            <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Host Application Interface Scanner</xhtml:li>
                                    <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Manual Static Analysis - Source Code</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Highly cost effective:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                                    <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Automated Static Analysis - Source Code</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Highly cost effective:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                                    <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Architecture or Design Review</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Highly cost effective:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                                    <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                            <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Attack Modeling</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
            </Detection_Methods>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Architecture and Design</Phase>
                    <Strategy>Attack Surface Reduction</Strategy>
                    <Description>Consider using language-theoretic security (LangSec) techniques that characterizes inputs using a formal language and builds "recognizers" for that language.  This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111]</Description>
                </Mitigation>
                <Mitigation Mitigation_ID="MIT-7">
                    <Phase>Architecture and Design</Phase>
                    <Strategy>Libraries or Frameworks</Strategy>
                    <Description>Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).</Description>
                </Mitigation>
                <Mitigation Mitigation_ID="MIT-6">
                    <Phase>Architecture and Design</Phase>
                    <Phase>Implementation</Phase>
                    <Strategy>Attack Surface Reduction</Strategy>
                    <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</Description>
                </Mitigation>
                <Mitigation Mitigation_ID="MIT-5">
                    <Phase>Implementation</Phase>
                    <Strategy>Input Validation</Strategy>
                    <Description>
                        <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                        <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                        <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Mitigation>
                <Mitigation>
                    <Phase>Architecture and Design</Phase>
                    <Description>
                        <xhtml:p>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</xhtml:p>
                        <xhtml:p>Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.</xhtml:p>
                    </Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.</Description>
                </Mitigation>
                <Mitigation Mitigation_ID="MIT-35">
                    <Phase>Implementation</Phase>
                    <Description>Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>
                        <xhtml:p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.</xhtml:p>
                        <xhtml:p>Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.</xhtml:p>
                    </Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.</Description>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example Demonstrative_Example_ID="DX-135">
                    <Intro_Text>This example demonstrates a shopping interaction in which the user is free to specify the quantity of items to be purchased and a total is calculated.</Intro_Text>
                    <Example_Code Nature="bad" Language="Java">
                        <xhtml:div>...<xhtml:br/>public static final double price = 20.00;<xhtml:br/>int quantity = currentUser.getAttribute("quantity");<xhtml:br/>double total = price * quantity;<xhtml:br/>chargeUser(total);<xhtml:br/>...</xhtml:div>
                    </Example_Code>
                    <Body_Text>The user has no control over the price variable, however the code does not prevent a negative value from being specified for quantity. If an attacker were to provide a negative value, then the user would have their account credited instead of debited.</Body_Text>
                </Demonstrative_Example>
                <Demonstrative_Example Demonstrative_Example_ID="DX-136">
                    <Intro_Text>This example asks the user for a height and width of an m X n game board with a maximum dimension of 100 squares.</Intro_Text>
                    <Example_Code Nature="bad" Language="C">
                        <xhtml:div>...<xhtml:br/>#define MAX_DIM 100<xhtml:br/>...<xhtml:br/>
                            <xhtml:i>/* board dimensions */</xhtml:i>
                            <xhtml:br/>
                            <xhtml:br/>int m,n, error;<xhtml:br/>board_square_t *board;<xhtml:br/>printf("Please specify the board height: \n");<xhtml:br/>error = scanf("%d", &amp;m);<xhtml:br/>if ( EOF == error ){<xhtml:div style="margin-left:10px;">die("No integer passed: Die evil hacker!\n");</xhtml:div>}<xhtml:br/>printf("Please specify the board width: \n");<xhtml:br/>error = scanf("%d", &amp;n);<xhtml:br/>if ( EOF == error ){<xhtml:div style="margin-left:10px;">die("No integer passed: Die evil hacker!\n");</xhtml:div>}<xhtml:br/>if ( m &gt; MAX_DIM || n &gt; MAX_DIM ) {<xhtml:div style="margin-left:10px;">die("Value too large: Die evil hacker!\n");</xhtml:div>}<xhtml:br/>board = (board_square_t*) malloc( m * n * sizeof(board_square_t));<xhtml:br/>...</xhtml:div>
                    </Example_Code>
                    <Body_Text>While this code checks to make sure the user cannot specify large, positive integers and consume too much memory, it does not check for negative values supplied by the user. As a result, an attacker can perform a resource consumption (CWE-400) attack against this program by specifying two, large negative values that will not overflow, resulting in a very large memory allocation (CWE-789) and possibly a system crash. Alternatively, an attacker can provide very large negative values which will cause an integer overflow (CWE-190) and unexpected behavior will follow depending on how the values are treated in the remainder of the program.</Body_Text>
                </Demonstrative_Example>
                <Demonstrative_Example>
                    <Intro_Text>The following example shows a PHP application in which the programmer attempts to display a user's birthday and homepage.</Intro_Text>
                    <Example_Code Nature="bad" Language="PHP">
                        <xhtml:div>$birthday = $_GET['birthday'];<xhtml:br/>$homepage = $_GET['homepage'];<xhtml:br/>echo "Birthday: $birthday&lt;br&gt;Homepage: &lt;a href=$homepage&gt;click here&lt;/a&gt;"</xhtml:div>
                    </Example_Code>
                    <Body_Text>The programmer intended for $birthday to be in a date format and $homepage to be a valid URL. However, since the values are derived from an HTTP request, if an attacker can trick a victim into clicking a crafted URL with &lt;script&gt; tags providing the values for birthday and / or homepage, then the script will run on the client's browser when the web server echoes the content. Notice that even if the programmer were to defend the $birthday variable by restricting input to integers and dashes, it would still be possible for an attacker to provide a string of the form:</Body_Text>
                    <Example_Code Nature="attack">
                        <xhtml:div>2009-01-09--</xhtml:div>
                    </Example_Code>
                    <Body_Text>If this data were used in a SQL statement, it would treat the remainder of the statement as a comment. The comment could disable other security-related logic in the statement. In this case, encoding combined with input validation would be a more useful protection mechanism.</Body_Text>
                    <Body_Text>Furthermore, an XSS (CWE-79) attack or SQL injection (CWE-89) are just a few of the potential consequences when input validation is not used. Depending on the context of the code, CRLF Injection (CWE-93), Argument Injection (CWE-88), or Command Injection (CWE-77) may also be possible.</Body_Text>
                </Demonstrative_Example>
                <Demonstrative_Example Demonstrative_Example_ID="DX-34">
                    <Intro_Text>The following example takes a user-supplied value to allocate an array of objects and then operates on the array.</Intro_Text>
                    <Example_Code Nature="bad" Language="Java">
                        <xhtml:div>private void buildList ( int untrustedListSize ){<xhtml:div style="margin-left:10px;">if ( 0 &gt; untrustedListSize ){<xhtml:div style="margin-left:10px;">die("Negative value supplied for list size, die evil hacker!");</xhtml:div>}<xhtml:br/>Widget[] list = new Widget [ untrustedListSize ];<xhtml:br/>list[0] = new Widget();</xhtml:div>}</xhtml:div>
                    </Example_Code>
                    <Body_Text>This example attempts to build a list from a user-specified value, and even checks to ensure a non-negative value is supplied. If, however, a 0 value is provided, the code will build an array of size 0 and then try to store a new Widget in the first location, causing an exception to be thrown.</Body_Text>
                </Demonstrative_Example>
                <Demonstrative_Example Demonstrative_Example_ID="DX-110">
                    <Intro_Text>This Android application has registered to handle a URL when sent an intent:</Intro_Text>
                    <Example_Code Nature="bad" Language="Java">
                        <xhtml:div>
                            <xhtml:br/>
                            <xhtml:i>...</xhtml:i>
                            <xhtml:br/>IntentFilter filter = new IntentFilter("com.example.URLHandler.openURL");<xhtml:br/>MyReceiver receiver = new MyReceiver();<xhtml:br/>registerReceiver(receiver, filter);<xhtml:br/>
                            <xhtml:i>...</xhtml:i>
                            <xhtml:br/>
                            <xhtml:br/>public class UrlHandlerReceiver extends BroadcastReceiver {<xhtml:div style="margin-left:10px;">
                            <xhtml:div>@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style="margin-left:10px;">
                                <xhtml:div>if("com.example.URLHandler.openURL".equals(intent.getAction())) {<xhtml:div style="margin-left:10px;">String URL = intent.getStringExtra("URLToOpen");<xhtml:br/>int length = URL.length();</xhtml:div>
                                    <xhtml:br/>
                                    <xhtml:i>...</xhtml:i>
                                    <xhtml:br/>}</xhtml:div>
                            </xhtml:div>}</xhtml:div>
                        </xhtml:div>}</xhtml:div>
                    </Example_Code>
                    <Body_Text>The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called.</Body_Text>
                </Demonstrative_Example>
            </Demonstrative_Examples>
            <Observed_Examples>
                <Observed_Example>
                    <Reference>CVE-2008-5305</Reference>
                    <Description>Eval injection in Perl program using an ID that should only contain hyphens and numbers.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5305</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-2223</Reference>
                    <Description>SQL injection through an ID that was supposed to be numeric.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2223</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-3477</Reference>
                    <Description>lack of input validation in spreadsheet program leads to buffer overflows, integer overflows, array index errors, and memory corruption.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3477</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-3843</Reference>
                    <Description>insufficient validation enables XSS</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3843</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-3174</Reference>
                    <Description>driver in security product allows code execution due to insufficient validation</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3174</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2007-3409</Reference>
                    <Description>infinite loop from DNS packet with a label that points to itself</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3409</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2006-6870</Reference>
                    <Description>infinite loop from DNS packet with a label that points to itself</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6870</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-1303</Reference>
                    <Description>missing parameter leads to crash</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1303</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2007-5893</Reference>
                    <Description>HTTP request with missing protocol version number leads to crash</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5893</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2006-6658</Reference>
                    <Description>request with missing parameters leads to information exposure</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6658</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-4114</Reference>
                    <Description>system crash with offset value that is inconsistent with packet size</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4114</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2006-3790</Reference>
                    <Description>size field that is inconsistent with packet size leads to buffer over-read</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3790</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-2309</Reference>
                    <Description>product uses a denylist to identify potentially dangerous content, allowing attacker to bypass a warning</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2309</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-3494</Reference>
                    <Description>security bypass via an extra header</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3494</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-3571</Reference>
                    <Description>empty packet triggers reboot</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3571</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2006-5525</Reference>
                    <Description>incomplete denylist allows SQL injection</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5525</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-1284</Reference>
                    <Description>NUL byte in theme name causes directory traversal impact to be worse</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1284</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-0600</Reference>
                    <Description>kernel does not validate an incoming pointer before dereferencing it</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0600</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-1738</Reference>
                    <Description>anti-virus product has insufficient input validation of hooked SSDT functions, allowing code execution</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1738</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-1737</Reference>
                    <Description>anti-virus product allows DoS via zero-length field</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1737</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-3464</Reference>
                    <Description>driver does not validate input from userland to the kernel</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3464</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-2252</Reference>
                    <Description>kernel does not validate parameters sent in from userland, allowing code execution</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2252</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-2374</Reference>
                    <Description>lack of validation of string length fields allows memory consumption or buffer over-read</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2374</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-1440</Reference>
                    <Description>lack of validation of length field leads to infinite loop</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1440</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-1625</Reference>
                    <Description>lack of validation of input to an IOCTL allows code execution</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1625</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-3177</Reference>
                    <Description>zero-length attachment causes crash</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3177</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2007-2442</Reference>
                    <Description>zero-length input causes free of uninitialized pointer</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2442</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-5563</Reference>
                    <Description>crash via a malformed frame structure</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5563</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-5285</Reference>
                    <Description>infinite loop from a long SMTP request</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5285</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-3812</Reference>
                    <Description>router crashes with a malformed packet</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3812</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-3680</Reference>
                    <Description>packet with invalid version number leads to NULL pointer dereference</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3680</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-3660</Reference>
                    <Description>crash via multiple "." characters in file extension</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3660</Link>
                </Observed_Example>
            </Observed_Examples>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
                    <Entry_Name>Input validation and representation</Entry_Name>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
                    <Entry_ID>A1</Entry_ID>
                    <Entry_Name>Unvalidated Input</Entry_Name>
                    <Mapping_Fit>CWE More Specific</Mapping_Fit>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
                    <Entry_ID>ERR07-C</Entry_ID>
                    <Entry_Name>Prefer functions that support error checking over equivalent functions that don't</Entry_Name>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
                    <Entry_ID>FIO30-C</Entry_ID>
                    <Entry_Name>Exclude user input from format strings</Entry_Name>
                    <Mapping_Fit>CWE More Abstract</Mapping_Fit>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
                    <Entry_ID>MEM10-C</Entry_ID>
                    <Entry_Name>Define and use a pointer validation function</Entry_Name>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="WASC">
                    <Entry_ID>20</Entry_ID>
                    <Entry_Name>Improper Input Handling</Entry_Name>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
                    <Entry_ID>SFP25</Entry_ID>
                    <Entry_Name>Tainted input to variable</Entry_Name>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <Related_Attack_Patterns>
                <Related_Attack_Pattern CAPEC_ID="10"/>
                <Related_Attack_Pattern CAPEC_ID="101"/>
                <Related_Attack_Pattern CAPEC_ID="104"/>
                <Related_Attack_Pattern CAPEC_ID="108"/>
                <Related_Attack_Pattern CAPEC_ID="109"/>
                <Related_Attack_Pattern CAPEC_ID="110"/>
                <Related_Attack_Pattern CAPEC_ID="120"/>
                <Related_Attack_Pattern CAPEC_ID="13"/>
                <Related_Attack_Pattern CAPEC_ID="135"/>
                <Related_Attack_Pattern CAPEC_ID="136"/>
                <Related_Attack_Pattern CAPEC_ID="14"/>
                <Related_Attack_Pattern CAPEC_ID="153"/>
                <Related_Attack_Pattern CAPEC_ID="182"/>
                <Related_Attack_Pattern CAPEC_ID="209"/>
                <Related_Attack_Pattern CAPEC_ID="22"/>
                <Related_Attack_Pattern CAPEC_ID="23"/>
                <Related_Attack_Pattern CAPEC_ID="230"/>
                <Related_Attack_Pattern CAPEC_ID="231"/>
                <Related_Attack_Pattern CAPEC_ID="24"/>
                <Related_Attack_Pattern CAPEC_ID="250"/>
                <Related_Attack_Pattern CAPEC_ID="261"/>
                <Related_Attack_Pattern CAPEC_ID="267"/>
                <Related_Attack_Pattern CAPEC_ID="28"/>
                <Related_Attack_Pattern CAPEC_ID="3"/>
                <Related_Attack_Pattern CAPEC_ID="31"/>
                <Related_Attack_Pattern CAPEC_ID="42"/>
                <Related_Attack_Pattern CAPEC_ID="43"/>
                <Related_Attack_Pattern CAPEC_ID="45"/>
                <Related_Attack_Pattern CAPEC_ID="46"/>
                <Related_Attack_Pattern CAPEC_ID="47"/>
                <Related_Attack_Pattern CAPEC_ID="473"/>
                <Related_Attack_Pattern CAPEC_ID="52"/>
                <Related_Attack_Pattern CAPEC_ID="53"/>
                <Related_Attack_Pattern CAPEC_ID="588"/>
                <Related_Attack_Pattern CAPEC_ID="63"/>
                <Related_Attack_Pattern CAPEC_ID="64"/>
                <Related_Attack_Pattern CAPEC_ID="67"/>
                <Related_Attack_Pattern CAPEC_ID="7"/>
                <Related_Attack_Pattern CAPEC_ID="71"/>
                <Related_Attack_Pattern CAPEC_ID="72"/>
                <Related_Attack_Pattern CAPEC_ID="73"/>
                <Related_Attack_Pattern CAPEC_ID="78"/>
                <Related_Attack_Pattern CAPEC_ID="79"/>
                <Related_Attack_Pattern CAPEC_ID="8"/>
                <Related_Attack_Pattern CAPEC_ID="80"/>
                <Related_Attack_Pattern CAPEC_ID="81"/>
                <Related_Attack_Pattern CAPEC_ID="83"/>
                <Related_Attack_Pattern CAPEC_ID="85"/>
                <Related_Attack_Pattern CAPEC_ID="88"/>
                <Related_Attack_Pattern CAPEC_ID="9"/>
            </Related_Attack_Patterns>
            <References>
                <Reference External_Reference_ID="REF-6"/>
                <Reference External_Reference_ID="REF-166"/>
                <Reference External_Reference_ID="REF-45"/>
                <Reference External_Reference_ID="REF-168" Section="Input Validation Attacks"/>
                <Reference External_Reference_ID="REF-48"/>
                <Reference External_Reference_ID="REF-170"/>
                <Reference External_Reference_ID="REF-7" Section="Chapter 10, &#34;All Input Is Evil!&#34; Page 341"/>
                <Reference External_Reference_ID="REF-1109"/>
                <Reference External_Reference_ID="REF-1110"/>
                <Reference External_Reference_ID="REF-1111"/>
            </References>
            <Notes>
                <Note Type="Relationship">
                    <xhtml:p>CWE-116 and CWE-20 have a close association because, depending on the nature of the structured message, proper input validation can indirectly prevent special characters from changing the meaning of a structured message. For example, by validating that a numeric ID field should only contain the 0-9 characters, the programmer effectively prevents injection attacks.</xhtml:p>
                </Note>
                <Note Type="Maintenance">As of 2020, this entry is used more often than preferred, and it is a source of frequent confusion. It is being actively modified for CWE 4.1 and subsequent versions.</Note>
                <Note Type="Maintenance">Concepts such as validation, data transformation, and neutralization are being refined, so relationships between CWE-20 and other entries such as CWE-707 may change in future versions, along with an update to the Vulnerability Theory document.</Note>
                <Note Type="Maintenance">Input validation - whether missing or incorrect - is such an essential and widespread part of secure development that it is implicit in many different weaknesses. Traditionally, problems such as buffer overflows and XSS have been classified as input validation problems by many security professionals. However, input validation is not necessarily the only protection mechanism available for avoiding such problems, and in some cases it is not even sufficient. The CWE team has begun capturing these subtleties in chains within the Research Concepts view (CWE-1000), but more work is needed.</Note>
                <Note Type="Terminology">
                    <xhtml:p>The "input validation" term is extremely common, but it is used in many different ways. In some cases its usage can obscure the real underlying weakness or otherwise hide chaining and composite relationships.</xhtml:p>
                    <xhtml:p>Some people use "input validation" as a general term that covers many different neutralization techniques for ensuring that input is appropriate, such as filtering, canonicalization, and escaping. Others use the term in a more narrow context to simply mean "checking if an input conforms to expectations without changing it."  CWE uses this more narrow interpretation.</xhtml:p>
                </Note>
            </Notes>
            <Content_History>
                <Submission>
                    <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
                    <Submission_Date>2006-07-19</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>Eric Dalci</Modification_Name>
                    <Modification_Organization>Cigital</Modification_Organization>
                    <Modification_Date>2008-07-01</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Organization>Veracode</Modification_Organization>
                    <Modification_Date>2008-08-15</Modification_Date>
                    <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-09-08</Modification_Date>
                    <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-11-24</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-01-12</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationship_Notes, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-03-10</Modification_Date>
                    <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-05-27</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-07-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-10-29</Modification_Date>
                    <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Maintenance_Notes, Modes_of_Introduction, Observed_Examples, Relationships, Research_Gaps, Terminology_Notes</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-12-28</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-02-16</Modification_Date>
                    <Modification_Comment>updated Detection_Factors, Potential_Mitigations, References, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-04-05</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-06-21</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations, Research_Gaps, Terminology_Notes</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-09-27</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-12-13</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-03-29</Modification_Date>
                    <Modification_Comment>updated Observed_Examples</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-01</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationship_Notes</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-09-13</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-05-11</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-10-30</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2013-02-21</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2013-07-17</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2014-02-18</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2014-07-30</Modification_Date>
                    <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2015-12-07</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-01-19</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-05-03</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-11-08</Modification_Date>
                    <Modification_Comment>updated Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2018-03-27</Modification_Date>
                    <Modification_Comment>updated References</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-01-03</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-06-20</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-09-19</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations, References, Related_Attack_Patterns, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-06-25</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationship_Notes, Relationships, Research_Gaps, Terminology_Notes</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns, Relationships</Modification_Comment>
                </Modification>
                <Previous_Entry_Name Date="2009-01-12">Insufficient Input Validation</Previous_Entry_Name>
            </Content_History>
        </Weakness>
        <Weakness ID="362" Name="Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" Abstraction="Class" Structure="Simple" Status="Draft">
            <Description>The program contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.</Description>
            <Extended_Description>
                <xhtml:p>This can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider.</xhtml:p>
                <xhtml:p>A race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc.</xhtml:p>
                <xhtml:p>A race condition violates these properties, which are closely related:</xhtml:p>
                <xhtml:div style="margin-left:10px;">
                    <xhtml:ul>
                        <xhtml:li>Exclusivity - the code sequence is given exclusive access to the shared resource, i.e., no other code sequence can modify properties of the shared resource before the original sequence has completed execution.</xhtml:li>
                        <xhtml:li>Atomicity - the code sequence is behaviorally atomic, i.e., no other thread or process can concurrently execute the same sequence of instructions (or a subset) against the same resource.</xhtml:li>
                    </xhtml:ul>
                </xhtml:div>
                <xhtml:p>A race condition exists when an "interfering code sequence" can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single "x++" statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read (the original value of x), followed by a computation (x+1), followed by a write (save the result to x).</xhtml:p>
                <xhtml:p>The interfering code sequence could be "trusted" or "untrusted." A trusted interfering code sequence occurs within the program; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable program.</xhtml:p>
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="691" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Applicable_Platforms>
                <Language Name="C" Prevalence="Sometimes"/>
                <Language Name="C++" Prevalence="Sometimes"/>
                <Language Name="Java" Prevalence="Sometimes"/>
                <Technology Class="Mobile" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Architecture and Design</Phase>
                </Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
            <Common_Consequences>
                <Consequence>
                    <Scope>Availability</Scope>
                    <Impact>DoS: Resource Consumption (CPU)</Impact>
                    <Impact>DoS: Resource Consumption (Memory)</Impact>
                    <Impact>DoS: Resource Consumption (Other)</Impact>
                    <Note>When a race condition makes it possible to bypass a resource cleanup routine or trigger multiple initialization routines, it may lead to resource exhaustion (CWE-400).</Note>
                </Consequence>
                <Consequence>
                    <Scope>Availability</Scope>
                    <Impact>DoS: Crash, Exit, or Restart</Impact>
                    <Impact>DoS: Instability</Impact>
                    <Note>When a race condition allows multiple control flows to access a resource simultaneously, it might lead the program(s) into unexpected states, possibly resulting in a crash.</Note>
                </Consequence>
                <Consequence>
                    <Scope>Confidentiality</Scope>
                    <Scope>Integrity</Scope>
                    <Impact>Read Files or Directories</Impact>
                    <Impact>Read Application Data</Impact>
                    <Note>When a race condition is combined with predictable resource names and loose permissions, it may be possible for an attacker to overwrite or access confidential data (CWE-59).</Note>
                </Consequence>
            </Common_Consequences>
            <Detection_Methods>
                <Detection_Method>
                    <Method>Black Box</Method>
                    <Description>Black box methods may be able to identify evidence of race conditions via methods such as multiple simultaneous connections, which may cause the software to become instable or crash. However, race conditions with very narrow timing windows would not be detectable.</Description>
                </Detection_Method>
                <Detection_Method>
                    <Method>White Box</Method>
                    <Description>Common idioms are detectable in white box analysis, such as time-of-check-time-of-use (TOCTOU) file operations (CWE-367), or double-checked locking (CWE-609).</Description>
                </Detection_Method>
                <Detection_Method Detection_Method_ID="DM-2">
                    <Method>Automated Dynamic Analysis</Method>
                    <Description>
                        <xhtml:p>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</xhtml:p>
                        <xhtml:p>Race conditions may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.</xhtml:p>
                        <xhtml:p>Insert breakpoints or delays in between relevant code statements to artificially expand the race window so that it will be easier to detect.</xhtml:p>
                    </Description>
                    <Effectiveness>Moderate</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Automated Static Analysis - Binary or Bytecode</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Highly cost effective:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                            <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Dynamic Analysis with Automated Results Interpretation</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Web Application Scanner</xhtml:li>
                                    <xhtml:li>Web Services Scanner</xhtml:li>
                                    <xhtml:li>Database Scanners</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>SOAR Partial</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Dynamic Analysis with Manual Results Interpretation</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Highly cost effective:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Framework-based Fuzzer</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                            <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Fuzz Tester</xhtml:li>
                                    <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Manual Static Analysis - Source Code</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Highly cost effective:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                            <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Automated Static Analysis - Source Code</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Highly cost effective:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                                    <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Architecture or Design Review</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Highly cost effective:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                            <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
            </Detection_Methods>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Architecture and Design</Phase>
                    <Description>In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Architecture and Design</Phase>
                    <Description>Use thread-safe capabilities such as the data access abstraction in Spring.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Architecture and Design</Phase>
                    <Description>
                        <xhtml:p>Minimize the usage of shared resources in order to remove as much complexity as possible from the control flow and to reduce the likelihood of unexpected conditions occurring.</xhtml:p>
                        <xhtml:p>Additionally, this will minimize the amount of synchronization necessary and may even help to reduce the likelihood of a denial of service where an attacker may be able to repeatedly trigger a critical section (CWE-400).</xhtml:p>
                    </Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>When using multithreading and operating on shared variables, only use thread-safe functions.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>Use atomic operations on shared variables. Be wary of innocent-looking constructs such as "x++". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.</Description>
                </Mitigation>
                <Mitigation Mitigation_ID="MIT-17">
                    <Phase>Architecture and Design</Phase>
                    <Phase>Operation</Phase>
                    <Strategy>Environment Hardening</Strategy>
                    <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example>
                    <Intro_Text>This code could be used in an e-commerce application that supports transfers between accounts. It takes the total amount of the transfer, sends it to the new account, and deducts the amount from the original account.</Intro_Text>
                    <Example_Code Nature="bad" Language="Perl">
                        <xhtml:div>$transfer_amount = GetTransferAmount();<xhtml:br/>$balance = GetBalanceFromDatabase();<xhtml:br/>
                            <xhtml:br/>if ($transfer_amount &lt; 0) {<xhtml:div style="margin-left:10px;">FatalError("Bad Transfer Amount");</xhtml:div>}<xhtml:br/>$newbalance = $balance - $transfer_amount;<xhtml:br/>if (($balance - $transfer_amount) &lt; 0) {<xhtml:div style="margin-left:10px;">FatalError("Insufficient Funds");</xhtml:div>}<xhtml:br/>SendNewBalanceToDatabase($newbalance);<xhtml:br/>NotifyUser("Transfer of $transfer_amount succeeded.");<xhtml:br/>NotifyUser("New balance: $newbalance");</xhtml:div>
                    </Example_Code>
                    <Body_Text>A race condition could occur between the calls to GetBalanceFromDatabase() and SendNewBalanceToDatabase().</Body_Text>
                    <Body_Text>Suppose the balance is initially 100.00. An attack could be constructed as follows:</Body_Text>
                    <Example_Code Nature="attack" Language="Other">
                        <xhtml:div>In the following pseudocode, the attacker makes two simultaneous calls of the program, CALLER-1 and CALLER-2. Both callers are for the same user account.<xhtml:br/>CALLER-1 (the attacker) is associated with PROGRAM-1 (the instance that handles CALLER-1). CALLER-2 is associated with PROGRAM-2.<xhtml:br/>CALLER-1 makes a transfer request of 80.00.<xhtml:br/>PROGRAM-1 calls GetBalanceFromDatabase and sets $balance to 100.00<xhtml:br/>PROGRAM-1 calculates $newbalance as 20.00, then calls SendNewBalanceToDatabase().<xhtml:br/>Due to high server load, the PROGRAM-1 call to SendNewBalanceToDatabase() encounters a delay.<xhtml:br/>CALLER-2 makes a transfer request of 1.00.<xhtml:br/>PROGRAM-2 calls GetBalanceFromDatabase() and sets $balance to 100.00. This happens because the previous PROGRAM-1 request was not processed yet.<xhtml:br/>PROGRAM-2 determines the new balance as 99.00.<xhtml:br/>After the initial delay, PROGRAM-1 commits its balance to the database, setting it to 20.00.<xhtml:br/>PROGRAM-2 sends a request to update the database, setting the balance to 99.00</xhtml:div>
                    </Example_Code>
                    <Body_Text>At this stage, the attacker should have a balance of 19.00 (due to 81.00 worth of transfers), but the balance is 99.00, as recorded in the database.</Body_Text>
                    <Body_Text>To prevent this weakness, the programmer has several options, including using a lock to prevent multiple simultaneous requests to the web application, or using a synchronization mechanism that includes all the code between GetBalanceFromDatabase() and SendNewBalanceToDatabase().</Body_Text>
                </Demonstrative_Example>
                <Demonstrative_Example Demonstrative_Example_ID="DX-24">
                    <Intro_Text>The following function attempts to acquire a lock in order to perform operations on a shared resource.</Intro_Text>
                    <Example_Code Nature="bad" Language="C">
                        <xhtml:div>void f(pthread_mutex_t *mutex) {<xhtml:div style="margin-left:10px;">
                            <xhtml:div>pthread_mutex_lock(mutex);<xhtml:br/>
                                <xhtml:br/>
                                <xhtml:i>/* access shared resource */</xhtml:i>
                                <xhtml:br/>
                                <xhtml:br/>
                                <xhtml:br/>pthread_mutex_unlock(mutex);</xhtml:div>
                        </xhtml:div>}</xhtml:div>
                    </Example_Code>
                    <Body_Text>However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior.</Body_Text>
                    <Body_Text>In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting it to higher levels.</Body_Text>
                    <Example_Code Nature="good">
                        <xhtml:div>int f(pthread_mutex_t *mutex) {<xhtml:div style="margin-left:10px;">
                            <xhtml:div>int result;<xhtml:br/>
                                <xhtml:br/>result = pthread_mutex_lock(mutex);<xhtml:br/>if (0 != result)<xhtml:div style="margin-left:10px;">return result;</xhtml:div>
                                <xhtml:br/>
                                <xhtml:br/>
                                <xhtml:i>/* access shared resource */</xhtml:i>
                                <xhtml:br/>
                                <xhtml:br/>
                                <xhtml:br/>return pthread_mutex_unlock(mutex);</xhtml:div>
                        </xhtml:div>}</xhtml:div>
                    </Example_Code>
                </Demonstrative_Example>
                <Demonstrative_Example Demonstrative_Example_ID="DX-132">
                    <Intro_Text>Suppose a processor's Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of "accessible" memory. Any time this accessible range changes (as per the processor's boot status), the main MMU sends an update message to all the shadow MMUs.</Intro_Text>
                    <Body_Text>Suppose the interconnect fabric does not prioritize such "update" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario.</Body_Text>
                </Demonstrative_Example>
            </Demonstrative_Examples>
            <Observed_Examples>
                <Observed_Example>
                    <Reference>CVE-2019-18827</Reference>
                    <Description>chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18827</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-5044</Reference>
                    <Description>Race condition leading to a crash by calling a hook removal procedure while other activities are occurring at the same time.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5044</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-2958</Reference>
                    <Description>chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2958</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-1570</Reference>
                    <Description>chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1570</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-0058</Reference>
                    <Description>Unsynchronized caching operation enables a race condition that causes messages to be sent to a deallocated object.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0058</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-0379</Reference>
                    <Description>Race condition during initialization triggers a buffer overflow.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0379</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2007-6599</Reference>
                    <Description>Daemon crash by quickly performing operations and undoing them, which eventually leads to an operation that does not acquire a lock.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6599</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2007-6180</Reference>
                    <Description>chain: race condition triggers NULL pointer dereference</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6180</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2007-5794</Reference>
                    <Description>Race condition in library function could cause data to be sent to the wrong process.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5794</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2007-3970</Reference>
                    <Description>Race condition in file parser leads to heap corruption.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3970</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-5021</Reference>
                    <Description>chain: race condition allows attacker to access an object while it is still being initialized, causing software to access uninitialized memory.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5021</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2009-4895</Reference>
                    <Description>chain: race condition for an argument value, possibly resulting in NULL dereference</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4895</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2009-3547</Reference>
                    <Description>chain: race condition might allow resource to be released before operating on it, leading to NULL dereference</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3547</Link>
                </Observed_Example>
            </Observed_Examples>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="PLOVER">
                    <Entry_Name>Race Conditions</Entry_Name>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
                    <Entry_ID>VNA03-J</Entry_ID>
                    <Entry_Name>Do not assume that a group of calls to independently atomic methods is atomic</Entry_Name>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <Related_Attack_Patterns>
                <Related_Attack_Pattern CAPEC_ID="26"/>
                <Related_Attack_Pattern CAPEC_ID="29"/>
            </Related_Attack_Patterns>
            <References>
                <Reference External_Reference_ID="REF-44" Section="&#34;Sin 13: Race Conditions.&#34; Page 205"/>
                <Reference External_Reference_ID="REF-349"/>
                <Reference External_Reference_ID="REF-350"/>
                <Reference External_Reference_ID="REF-351"/>
                <Reference External_Reference_ID="REF-352"/>
                <Reference External_Reference_ID="REF-353"/>
                <Reference External_Reference_ID="REF-354"/>
                <Reference External_Reference_ID="REF-355"/>
                <Reference External_Reference_ID="REF-356"/>
                <Reference External_Reference_ID="REF-357"/>
                <Reference External_Reference_ID="REF-76"/>
            </References>
            <Notes>
                <Note Type="Maintenance">The relationship between race conditions and synchronization problems (CWE-662) needs to be further developed. They are not necessarily two perspectives of the same core concept, since synchronization is only one technique for avoiding race conditions, and synchronization can be used for other purposes besides race condition prevention.</Note>
                <Note Type="Research Gap">Race conditions in web applications are under-studied and probably under-reported. However, in 2008 there has been growing interest in this area.</Note>
                <Note Type="Research Gap">Much of the focus of race condition research has been in Time-of-check Time-of-use (TOCTOU) variants (CWE-367), but many race conditions are related to synchronization problems that do not necessarily require a time-of-check.</Note>
                <Note Type="Research Gap">From a classification/taxonomy perspective, the relationships between concurrency and program state need closer investigation and may be useful in organizing related issues.</Note>
            </Notes>
            <Content_History>
                <Submission>
                    <Submission_Name>PLOVER</Submission_Name>
                    <Submission_Date>2006-07-19</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>Eric Dalci</Modification_Name>
                    <Modification_Organization>Cigital</Modification_Organization>
                    <Modification_Date>2008-07-01</Modification_Date>
                    <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-09-08</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-10-14</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-11-24</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-01-12</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationships, Research_Gaps</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-03-10</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-05-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-02-16</Modification_Date>
                    <Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-06-21</Modification_Date>
                    <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-09-27</Modification_Date>
                    <Modification_Comment>updated Observed_Examples, Potential_Mitigations, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-12-13</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Potential_Mitigations, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-01</Modification_Date>
                    <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-09-13</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-05-11</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2014-07-30</Modification_Date>
                    <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2015-12-07</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-11-08</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, References, Research_Gaps, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-01-03</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-06-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Contribution Type="Content">
                    <Contribution_Name>Martin Sebor</Contribution_Name>
                    <Contribution_Organization>Cisco Systems, Inc.</Contribution_Organization>
                    <Contribution_Date>2010-04-30</Contribution_Date>
                    <Contribution_Comment>Provided Demonstrative Example</Contribution_Comment>
                </Contribution>
                <Previous_Entry_Name Date="2008-04-11">Race Conditions</Previous_Entry_Name>
                <Previous_Entry_Name Date="2010-12-13">Race Condition</Previous_Entry_Name>
            </Content_History>
        </Weakness>
        <Weakness ID="362" Name="Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" Abstraction="Class" Structure="Simple" Status="Draft">
            <Description>The program contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.</Description>
            <Extended_Description>
                <xhtml:p>This can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider.</xhtml:p>
                <xhtml:p>A race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc.</xhtml:p>
                <xhtml:p>A race condition violates these properties, which are closely related:</xhtml:p>
                <xhtml:div style="margin-left:10px;">
                    <xhtml:ul>
                        <xhtml:li>Exclusivity - the code sequence is given exclusive access to the shared resource, i.e., no other code sequence can modify properties of the shared resource before the original sequence has completed execution.</xhtml:li>
                        <xhtml:li>Atomicity - the code sequence is behaviorally atomic, i.e., no other thread or process can concurrently execute the same sequence of instructions (or a subset) against the same resource.</xhtml:li>
                    </xhtml:ul>
                </xhtml:div>
                <xhtml:p>A race condition exists when an "interfering code sequence" can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single "x++" statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read (the original value of x), followed by a computation (x+1), followed by a write (save the result to x).</xhtml:p>
                <xhtml:p>The interfering code sequence could be "trusted" or "untrusted." A trusted interfering code sequence occurs within the program; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable program.</xhtml:p>
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="691" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Applicable_Platforms>
                <Language Name="C" Prevalence="Sometimes"/>
                <Language Name="C++" Prevalence="Sometimes"/>
                <Language Name="Java" Prevalence="Sometimes"/>
                <Technology Class="Mobile" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Architecture and Design</Phase>
                </Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
            <Common_Consequences>
                <Consequence>
                    <Scope>Availability</Scope>
                    <Impact>DoS: Resource Consumption (CPU)</Impact>
                    <Impact>DoS: Resource Consumption (Memory)</Impact>
                    <Impact>DoS: Resource Consumption (Other)</Impact>
                    <Note>When a race condition makes it possible to bypass a resource cleanup routine or trigger multiple initialization routines, it may lead to resource exhaustion (CWE-400).</Note>
                </Consequence>
                <Consequence>
                    <Scope>Availability</Scope>
                    <Impact>DoS: Crash, Exit, or Restart</Impact>
                    <Impact>DoS: Instability</Impact>
                    <Note>When a race condition allows multiple control flows to access a resource simultaneously, it might lead the program(s) into unexpected states, possibly resulting in a crash.</Note>
                </Consequence>
                <Consequence>
                    <Scope>Confidentiality</Scope>
                    <Scope>Integrity</Scope>
                    <Impact>Read Files or Directories</Impact>
                    <Impact>Read Application Data</Impact>
                    <Note>When a race condition is combined with predictable resource names and loose permissions, it may be possible for an attacker to overwrite or access confidential data (CWE-59).</Note>
                </Consequence>
            </Common_Consequences>
            <Detection_Methods>
                <Detection_Method>
                    <Method>Black Box</Method>
                    <Description>Black box methods may be able to identify evidence of race conditions via methods such as multiple simultaneous connections, which may cause the software to become instable or crash. However, race conditions with very narrow timing windows would not be detectable.</Description>
                </Detection_Method>
                <Detection_Method>
                    <Method>White Box</Method>
                    <Description>Common idioms are detectable in white box analysis, such as time-of-check-time-of-use (TOCTOU) file operations (CWE-367), or double-checked locking (CWE-609).</Description>
                </Detection_Method>
                <Detection_Method Detection_Method_ID="DM-2">
                    <Method>Automated Dynamic Analysis</Method>
                    <Description>
                        <xhtml:p>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</xhtml:p>
                        <xhtml:p>Race conditions may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.</xhtml:p>
                        <xhtml:p>Insert breakpoints or delays in between relevant code statements to artificially expand the race window so that it will be easier to detect.</xhtml:p>
                    </Description>
                    <Effectiveness>Moderate</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Automated Static Analysis - Binary or Bytecode</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Highly cost effective:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                            <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Dynamic Analysis with Automated Results Interpretation</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Web Application Scanner</xhtml:li>
                                    <xhtml:li>Web Services Scanner</xhtml:li>
                                    <xhtml:li>Database Scanners</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>SOAR Partial</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Dynamic Analysis with Manual Results Interpretation</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Highly cost effective:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Framework-based Fuzzer</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                            <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Fuzz Tester</xhtml:li>
                                    <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Manual Static Analysis - Source Code</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Highly cost effective:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                            <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Automated Static Analysis - Source Code</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Highly cost effective:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                                    <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
                <Detection_Method>
                    <Method>Architecture or Design Review</Method>
                    <Description>
                        <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                        <xhtml:div style="margin-left:10px;">
                            <xhtml:div>Highly cost effective:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                            <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                            <xhtml:div style="margin-left:10px;">
                                <xhtml:ul>
                                    <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                                </xhtml:ul>
                            </xhtml:div>
                        </xhtml:div>
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
            </Detection_Methods>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Architecture and Design</Phase>
                    <Description>In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Architecture and Design</Phase>
                    <Description>Use thread-safe capabilities such as the data access abstraction in Spring.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Architecture and Design</Phase>
                    <Description>
                        <xhtml:p>Minimize the usage of shared resources in order to remove as much complexity as possible from the control flow and to reduce the likelihood of unexpected conditions occurring.</xhtml:p>
                        <xhtml:p>Additionally, this will minimize the amount of synchronization necessary and may even help to reduce the likelihood of a denial of service where an attacker may be able to repeatedly trigger a critical section (CWE-400).</xhtml:p>
                    </Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>When using multithreading and operating on shared variables, only use thread-safe functions.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>Use atomic operations on shared variables. Be wary of innocent-looking constructs such as "x++". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.</Description>
                </Mitigation>
                <Mitigation Mitigation_ID="MIT-17">
                    <Phase>Architecture and Design</Phase>
                    <Phase>Operation</Phase>
                    <Strategy>Environment Hardening</Strategy>
                    <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example>
                    <Intro_Text>This code could be used in an e-commerce application that supports transfers between accounts. It takes the total amount of the transfer, sends it to the new account, and deducts the amount from the original account.</Intro_Text>
                    <Example_Code Nature="bad" Language="Perl">
                        <xhtml:div>$transfer_amount = GetTransferAmount();<xhtml:br/>$balance = GetBalanceFromDatabase();<xhtml:br/>
                            <xhtml:br/>if ($transfer_amount &lt; 0) {<xhtml:div style="margin-left:10px;">FatalError("Bad Transfer Amount");</xhtml:div>}<xhtml:br/>$newbalance = $balance - $transfer_amount;<xhtml:br/>if (($balance - $transfer_amount) &lt; 0) {<xhtml:div style="margin-left:10px;">FatalError("Insufficient Funds");</xhtml:div>}<xhtml:br/>SendNewBalanceToDatabase($newbalance);<xhtml:br/>NotifyUser("Transfer of $transfer_amount succeeded.");<xhtml:br/>NotifyUser("New balance: $newbalance");</xhtml:div>
                    </Example_Code>
                    <Body_Text>A race condition could occur between the calls to GetBalanceFromDatabase() and SendNewBalanceToDatabase().</Body_Text>
                    <Body_Text>Suppose the balance is initially 100.00. An attack could be constructed as follows:</Body_Text>
                    <Example_Code Nature="attack" Language="Other">
                        <xhtml:div>In the following pseudocode, the attacker makes two simultaneous calls of the program, CALLER-1 and CALLER-2. Both callers are for the same user account.<xhtml:br/>CALLER-1 (the attacker) is associated with PROGRAM-1 (the instance that handles CALLER-1). CALLER-2 is associated with PROGRAM-2.<xhtml:br/>CALLER-1 makes a transfer request of 80.00.<xhtml:br/>PROGRAM-1 calls GetBalanceFromDatabase and sets $balance to 100.00<xhtml:br/>PROGRAM-1 calculates $newbalance as 20.00, then calls SendNewBalanceToDatabase().<xhtml:br/>Due to high server load, the PROGRAM-1 call to SendNewBalanceToDatabase() encounters a delay.<xhtml:br/>CALLER-2 makes a transfer request of 1.00.<xhtml:br/>PROGRAM-2 calls GetBalanceFromDatabase() and sets $balance to 100.00. This happens because the previous PROGRAM-1 request was not processed yet.<xhtml:br/>PROGRAM-2 determines the new balance as 99.00.<xhtml:br/>After the initial delay, PROGRAM-1 commits its balance to the database, setting it to 20.00.<xhtml:br/>PROGRAM-2 sends a request to update the database, setting the balance to 99.00</xhtml:div>
                    </Example_Code>
                    <Body_Text>At this stage, the attacker should have a balance of 19.00 (due to 81.00 worth of transfers), but the balance is 99.00, as recorded in the database.</Body_Text>
                    <Body_Text>To prevent this weakness, the programmer has several options, including using a lock to prevent multiple simultaneous requests to the web application, or using a synchronization mechanism that includes all the code between GetBalanceFromDatabase() and SendNewBalanceToDatabase().</Body_Text>
                </Demonstrative_Example>
                <Demonstrative_Example Demonstrative_Example_ID="DX-24">
                    <Intro_Text>The following function attempts to acquire a lock in order to perform operations on a shared resource.</Intro_Text>
                    <Example_Code Nature="bad" Language="C">
                        <xhtml:div>void f(pthread_mutex_t *mutex) {<xhtml:div style="margin-left:10px;">
                            <xhtml:div>pthread_mutex_lock(mutex);<xhtml:br/>
                                <xhtml:br/>
                                <xhtml:i>/* access shared resource */</xhtml:i>
                                <xhtml:br/>
                                <xhtml:br/>
                                <xhtml:br/>pthread_mutex_unlock(mutex);</xhtml:div>
                        </xhtml:div>}</xhtml:div>
                    </Example_Code>
                    <Body_Text>However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior.</Body_Text>
                    <Body_Text>In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting it to higher levels.</Body_Text>
                    <Example_Code Nature="good">
                        <xhtml:div>int f(pthread_mutex_t *mutex) {<xhtml:div style="margin-left:10px;">
                            <xhtml:div>int result;<xhtml:br/>
                                <xhtml:br/>result = pthread_mutex_lock(mutex);<xhtml:br/>if (0 != result)<xhtml:div style="margin-left:10px;">return result;</xhtml:div>
                                <xhtml:br/>
                                <xhtml:br/>
                                <xhtml:i>/* access shared resource */</xhtml:i>
                                <xhtml:br/>
                                <xhtml:br/>
                                <xhtml:br/>return pthread_mutex_unlock(mutex);</xhtml:div>
                        </xhtml:div>}</xhtml:div>
                    </Example_Code>
                </Demonstrative_Example>
                <Demonstrative_Example Demonstrative_Example_ID="DX-132">
                    <Intro_Text>Suppose a processor's Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of "accessible" memory. Any time this accessible range changes (as per the processor's boot status), the main MMU sends an update message to all the shadow MMUs.</Intro_Text>
                    <Body_Text>Suppose the interconnect fabric does not prioritize such "update" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario.</Body_Text>
                </Demonstrative_Example>
            </Demonstrative_Examples>
            <Observed_Examples>
                <Observed_Example>
                    <Reference>CVE-2019-18827</Reference>
                    <Description>chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18827</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-5044</Reference>
                    <Description>Race condition leading to a crash by calling a hook removal procedure while other activities are occurring at the same time.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5044</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-2958</Reference>
                    <Description>chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2958</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-1570</Reference>
                    <Description>chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1570</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-0058</Reference>
                    <Description>Unsynchronized caching operation enables a race condition that causes messages to be sent to a deallocated object.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0058</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-0379</Reference>
                    <Description>Race condition during initialization triggers a buffer overflow.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0379</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2007-6599</Reference>
                    <Description>Daemon crash by quickly performing operations and undoing them, which eventually leads to an operation that does not acquire a lock.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6599</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2007-6180</Reference>
                    <Description>chain: race condition triggers NULL pointer dereference</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6180</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2007-5794</Reference>
                    <Description>Race condition in library function could cause data to be sent to the wrong process.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5794</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2007-3970</Reference>
                    <Description>Race condition in file parser leads to heap corruption.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3970</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2008-5021</Reference>
                    <Description>chain: race condition allows attacker to access an object while it is still being initialized, causing software to access uninitialized memory.</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5021</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2009-4895</Reference>
                    <Description>chain: race condition for an argument value, possibly resulting in NULL dereference</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4895</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2009-3547</Reference>
                    <Description>chain: race condition might allow resource to be released before operating on it, leading to NULL dereference</Description>
                    <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3547</Link>
                </Observed_Example>
            </Observed_Examples>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="PLOVER">
                    <Entry_Name>Race Conditions</Entry_Name>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
                    <Entry_ID>VNA03-J</Entry_ID>
                    <Entry_Name>Do not assume that a group of calls to independently atomic methods is atomic</Entry_Name>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <Related_Attack_Patterns>
                <Related_Attack_Pattern CAPEC_ID="26"/>
                <Related_Attack_Pattern CAPEC_ID="29"/>
            </Related_Attack_Patterns>
            <References>
                <Reference External_Reference_ID="REF-44" Section="&#34;Sin 13: Race Conditions.&#34; Page 205"/>
                <Reference External_Reference_ID="REF-349"/>
                <Reference External_Reference_ID="REF-350"/>
                <Reference External_Reference_ID="REF-351"/>
                <Reference External_Reference_ID="REF-352"/>
                <Reference External_Reference_ID="REF-353"/>
                <Reference External_Reference_ID="REF-354"/>
                <Reference External_Reference_ID="REF-355"/>
                <Reference External_Reference_ID="REF-356"/>
                <Reference External_Reference_ID="REF-357"/>
                <Reference External_Reference_ID="REF-76"/>
            </References>
            <Notes>
                <Note Type="Maintenance">The relationship between race conditions and synchronization problems (CWE-662) needs to be further developed. They are not necessarily two perspectives of the same core concept, since synchronization is only one technique for avoiding race conditions, and synchronization can be used for other purposes besides race condition prevention.</Note>
                <Note Type="Research Gap">Race conditions in web applications are under-studied and probably under-reported. However, in 2008 there has been growing interest in this area.</Note>
                <Note Type="Research Gap">Much of the focus of race condition research has been in Time-of-check Time-of-use (TOCTOU) variants (CWE-367), but many race conditions are related to synchronization problems that do not necessarily require a time-of-check.</Note>
                <Note Type="Research Gap">From a classification/taxonomy perspective, the relationships between concurrency and program state need closer investigation and may be useful in organizing related issues.</Note>
            </Notes>
            <Content_History>
                <Submission>
                    <Submission_Name>PLOVER</Submission_Name>
                    <Submission_Date>2006-07-19</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>Eric Dalci</Modification_Name>
                    <Modification_Organization>Cigital</Modification_Organization>
                    <Modification_Date>2008-07-01</Modification_Date>
                    <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-09-08</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-10-14</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-11-24</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-01-12</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationships, Research_Gaps</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-03-10</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-05-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-02-16</Modification_Date>
                    <Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-06-21</Modification_Date>
                    <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-09-27</Modification_Date>
                    <Modification_Comment>updated Observed_Examples, Potential_Mitigations, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-12-13</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Potential_Mitigations, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-01</Modification_Date>
                    <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-09-13</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-05-11</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2014-07-30</Modification_Date>
                    <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2015-12-07</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-11-08</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, References, Research_Gaps, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-01-03</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-06-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Contribution Type="Content">
                    <Contribution_Name>Martin Sebor</Contribution_Name>
                    <Contribution_Organization>Cisco Systems, Inc.</Contribution_Organization>
                    <Contribution_Date>2010-04-30</Contribution_Date>
                    <Contribution_Comment>Provided Demonstrative Example</Contribution_Comment>
                </Contribution>
                <Previous_Entry_Name Date="2008-04-11">Race Conditions</Previous_Entry_Name>
                <Previous_Entry_Name Date="2010-12-13">Race Condition</Previous_Entry_Name>
            </Content_History>
        </Weakness>
    </Weaknesses>
</Weakness_Catalog>