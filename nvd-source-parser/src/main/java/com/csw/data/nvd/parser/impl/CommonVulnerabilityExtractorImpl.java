package com.csw.data.nvd.parser.impl;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONArray;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.csw.data.nvd.json.target.VendorComment;
import com.csw.data.nvd.json.target.Vulnerability;
import com.csw.data.nvd.parser.CommonVulnerabilityExtractor;
import com.csw.data.nvd.parser.CveProcessor;
import com.csw.data.nvd.service.LiveKeepService;

@Service
@Qualifier("CommonVulnerabilityExtractor")
public class CommonVulnerabilityExtractorImpl implements CommonVulnerabilityExtractor {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(CommonVulnerabilityExtractorImpl.class);
	
	@Value("#{'${parser.cve.download.url}'.split(',')}")
	private List<String> cveDownloadUrls;
	
	@Value("${parser.vendorcomments.download.url}")
	private List<String> vendorCommentUrls;
	
	@Value("${parser.cve.source.directory}")
	private String cveSourceDirectory;
	
	@Value("${parser.cve.local.directory}")
	private String cveLocalDirectory;
	
	@Autowired
	private CveProcessor cveProcessor;
	
	@Autowired
	private LiveKeepService liveKeepService;
	
	@Override
	public void parseCve() throws IOException {
		
		Map<String, List<VendorComment>> vendorComments = cveProcessor.extractVendorComments(vendorCommentUrls, cveSourceDirectory);
		List<Vulnerability> vulnerabilities = cveProcessor.extractVulnerabilitiesFromSource(cveDownloadUrls, cveSourceDirectory, vendorComments);
		JSONArray kafkaMessage = liveKeepService.writeFileToLiveKeep(vulnerabilities, cveLocalDirectory);
		LOGGER.debug("Kafka message size : {}", kafkaMessage.length());
		//send the kafka message
		
		LOGGER.info("CVE data process completed");
	}
	
}
